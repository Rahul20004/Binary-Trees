class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        preorderHelper(root, result);  // helper method
        return result;
    }
// Helper Method (By Recursive way )
    public void preorderHelper(TreeNode node, List<Integer> result) {
        if (node == null) return; //  Base case
        
        result.add(node.val);               // 1. Visit Root
        preorderHelper(node.left, result);  // 2. Traverse Left
        preorderHelper(node.right, result); // 3. Traverse Right
    }
}

Explaination:
 Algorithm Steps
Create an empty list to store the traversal result.

Call a helper function (recursive) with:

The current node (starting with root)

The result list

Inside the helper function:

If the current node is null, return (base case).

Visit the node â†’ Add its value to the result list.

Traverse the left subtree recursively.

Traverse the right subtree recursively.

After traversal completes, return the result list.


